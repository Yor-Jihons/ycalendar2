{"version":3,"file":"ycalendar2.js","mappings":"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","sources":["webpack:///./src/checkeddates.ts","webpack:///./src/event.ts","webpack:///./src/tablecreation.ts","webpack:///./src/util.ts","webpack:///./src/ycalendar.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./src/main.ts"],"sourcesContent":["/**\r\n* @file\r\n* @license\r\n* Copyright (c) 2022 Yor-Jihons\r\n* Released under the MIT license.\r\n* https://github.com/Yor-Jihons/ycalendar2/blob/main/ycalendar2/LICENSE\r\n*/\r\n\r\n\r\n/**\r\n* The enums to indicate whether the CheckedDate is positive meanings or not.\r\n*/\r\nexport let CheckedDateType = {\r\n    Negative: -1,\r\n    Unchecked: 0,\r\n    Positive:  1,\r\n};\r\n\r\n\r\n/**\r\n* The class, to make it easier to use, which derived from Date.\r\n*/\r\nexport class DateEx{\r\n    /**\r\n    * The object of the class Date, which this object manages.\r\n    */\r\n    private _date:Date;\r\n\r\n    /**\r\n    * Contructor\r\n    * @param year The year the user want to manage.\r\n    * @param month The month the user want to manage. The value must be from 1 to 12.\r\n    * @param date The date the user want to manage. The value is from 1 to 31.\r\n    */\r\n    constructor( year:number, month:number, date:number = 1 ){\r\n        if( month < 0 || month > 12 ) throw new Error( \"The month value should be from 1 to 12.\" );\r\n        if( date < 0 || date > 31 ) throw new Error( \"The date value should be from 1 to 31.\" );\r\n\r\n        this._date = new Date( year, month - 1, date, 1, 1, 1, 1 );\r\n    }\r\n\r\n    /**\r\n    * Get the year this object managed.\r\n    * @returns The year this object managed.\r\n    */\r\n    getFullYear():number{\r\n        return this._date.getFullYear();\r\n    }\r\n\r\n    /**\r\n    * Get the month this object managed.\r\n    * @returns The month this object managed. The value is from 1 to 12.\r\n    */\r\n    getMonth():number{\r\n        return this._date.getMonth() + 1;\r\n    }\r\n\r\n    /**\r\n    * Get the date this object managed.\r\n    * @returns The date this object managed. The value is from 1 to 31.\r\n    */\r\n    getDate():number{\r\n        return this._date.getDate();\r\n    }\r\n\r\n    /**\r\n    * Get the day of the week this object managed.\r\n    * @returns The day of the week this object managed.\r\n    */\r\n    getDay():number{\r\n        return this._date.getDay();\r\n    }\r\n\r\n    /**\r\n    * Create the string for the date.\r\n    * @returns The string for the date which this object managed.\r\n    */\r\n    toDateString(): string{\r\n        return this._date.toDateString();\r\n    }\r\n\r\n    /**\r\n    * Check whether date is same or not.\r\n    * @param  d The object of the class DateEx.\r\n    * @returns Returns true if d is same, otherwise returns false.\r\n    */\r\n    equals( d:DateEx ): boolean{\r\n        if( this._date.getFullYear() == d._date.getFullYear()\r\n        && this._date.getMonth() == d._date.getMonth()\r\n        && this._date.getDate() == d._date.getDate() ) return true;\r\n    return false;\r\n    }\r\n\r\n    /**\r\n    * Create the object of this class, which means the end of the month.\r\n    * @returns The object of this class, which means the end of the month.\r\n    */\r\n    createLastDateEx(): DateEx{\r\n        let tmp = new Date( this.getFullYear(), this.getMonth(), 0 );\r\n    return new DateEx( tmp.getFullYear(), tmp.getMonth() + 1, tmp.getDate() );\r\n    }\r\n}\r\n\r\n\r\n/**\r\n* The class to put other color as the checked dates, like a schedule.\r\n*/\r\nexport class CheckedDate extends DateEx{\r\n    /**\r\n    * The type { Positive | Negative }\r\n    */\r\n    private _type:number;\r\n\r\n    /**\r\n    * The constructor.\r\n    * @param year The year.\r\n    * @param month The month. The value must be from 1 to 12.\r\n    * @param date The date. The value is from 1 to 31.\r\n    * @param type The type (negative or positive). ( def: CheckedDateType.Positive )\r\n    */\r\n    constructor( year:number, month:number, date:number, type:number = CheckedDateType.Positive ){\r\n        super( year, month, date );\r\n        this._type = type;\r\n    }\r\n\r\n    /**\r\n    * Check whether date is same or not.\r\n    * @param d The object of the class CheckedDate.\r\n    * @returns Returns true if d is same, otherwise returns false.\r\n    */\r\n    equals( d:CheckedDate ): boolean{\r\n        return super.equals( d );\r\n    }\r\n\r\n    /**\r\n    * Get the data of CheckedDateType.\r\n    * @returns The data of CheckedDateType.\r\n    */\r\n    getType(): number{\r\n        return this._type;\r\n    }\r\n\r\n    /**\r\n    *  Make a string to print.\r\n    * @returns The string for the date.\r\n    */\r\n    toString(): string{\r\n        return super.toDateString();\r\n    }\r\n\r\n    /**\r\n    * Create the object of this class, which means the end of the month.\r\n    * @returns The object of this class, which means the end of the month.\r\n    */\r\n    createLastDateEx(): DateEx{\r\n        const superDateEx1 = super.createLastDateEx();\r\n    return new CheckedDate( superDateEx1.getFullYear(), superDateEx1.getMonth(), superDateEx1.getDate() );\r\n    }\r\n};\r\n\r\n\r\n/**\r\n* The class to manage the CheckedDate.\r\n*/\r\nexport class CheckedDateList{\r\n    /**\r\n    * The array of the class CheckedDateEx.\r\n    */\r\n    private _checkedDates:any;\r\n\r\n    /**\r\n    * The constructor.\r\n    */\r\n    constructor(){\r\n        this._checkedDates = new Array();\r\n    }\r\n\r\n    /**\r\n    * Add an object of the class CheckedDate.\r\n    * @param d An object of the class CheckedDate.\r\n    */\r\n    add( d:CheckedDate ): void{\r\n        this._checkedDates.push( d );\r\n    }\r\n\r\n    /**\r\n    * Clear the array this object manages.\r\n    */\r\n    clear(): void{\r\n        this._checkedDates.splice( 0 );\r\n    }\r\n\r\n    /**\r\n    * Get the object of the class CheckedDate.\r\n    * @param target the object of the class CheckedDate, which you want to search.\r\n    * @returns Returns the object of the CheckedDate if this object has, otherwise returns null.\r\n    */\r\n    at( target:CheckedDate ): CheckedDate|null{\r\n        for( let i = 0; i < this._checkedDates.length; i++ ){\r\n            if( this._checkedDates[i].equals( target ) == true ){\r\n                return this._checkedDates[i];\r\n            }\r\n        }\r\n    return null;\r\n    }\r\n\r\n    /**\r\n    * Check whether this object has the target date or not.\r\n    * @param target the object of the class CheckedDate, which you want to search.\r\n    * @returns Returns true if this object has the target, otherwise return false.\r\n    */\r\n    has( target:CheckedDate ): boolean{\r\n        return(this.at( target ) == null ? false : true);\r\n    }\r\n\r\n    /**\r\n    * Print to debug.\r\n    */\r\n    print(): void{\r\n        var txt = \"\";\r\n        for( let i = 0; i < this._checkedDates.length; i++ ){\r\n            txt += this._checkedDates[i].toString() + \"\\n\";\r\n        }\r\n        alert( txt );\r\n    }\r\n};\r\n\r\n\r\n/**\r\n* Create the object of the class DateEx, which means today's date.\r\n* @returns The object of the class DateEx, which means today's date.\r\n*/\r\nexport function createTodayDateEx(): DateEx{\r\n    let today = new Date();\r\nreturn new DateEx( today.getFullYear(), today.getMonth() + 1, today.getDate() );\r\n}\r\n\r\n/**\r\n* Create the object of the class DateEx, which was made from Date.\r\n* @param date The source Date.\r\n* @returns The object of the class DateEx, which was made from Date.\r\n*/\r\nexport function createDateExFromDate( date:Date ): DateEx{\r\n    return new DateEx( date.getFullYear(), date.getMonth() + 1, date.getDate() );\r\n}\r\n\r\n/**\r\n* Create the object of the class CheckedDate, which means today's date.\r\n* @param type The enum { CheckedDateType.Positive | CheckedDateType.Negative }. ( def: CheckedDateType.Positive )\r\n* @returns The object of the class CheckedDate, which means today's date.\r\n*/\r\nexport function createTodayCheckedDate( type:number = CheckedDateType.Positive ): CheckedDate{\r\n    let today = new Date();\r\nreturn new CheckedDate( today.getFullYear(), today.getMonth() + 1, today.getDate(), type );\r\n}\r\n\r\n/**\r\n* Create the object of the class CheckedDate, which was made from Date.\r\n* @param date The source Date.\r\n* @param type The enum { CheckedDateType.Positive | CheckedDateType.Negative }. ( def: CheckedDateType.Positive )\r\n* @returns The object of the class CheckedDate, which was made from Date.\r\n*/\r\nexport function createCheckedDateFromDate( date:Date, type:number = CheckedDateType.Positive ): CheckedDate{\r\n    return new CheckedDate( date.getFullYear(), date.getMonth() + 1, date.getDate(), type );\r\n}\r\n","/**\r\n* @file\r\n* @license\r\n* Copyright (c) 2022 Yor-Jihons\r\n* Released under the MIT license.\r\n* https://github.com/Yor-Jihons/ycalendar2/blob/main/ycalendar2/LICENSE\r\n*/\r\n\r\n/**\r\n* The Event for ycalendar.\r\n* If you want to double click, implement the method onDoubleClicked.\r\n*/\r\nexport class Event{\r\n    /**\r\n    * The event for ycalendar.\r\n    * If some cells double-clicked, this event will run.\r\n    * @param year The year.\r\n    * @param month The month. The value is from 1 to 12.\r\n    * @param date The date. The value is from 1 to 31.\r\n    */\r\n    onDoubleClicked( year:number, month:number, date:number ): void{}\r\n}\r\n","/**\r\n* @file\r\n* @license\r\n* Copyright (c) 2022 Yor-Jihons\r\n* Released under the MIT license.\r\n* https://github.com/Yor-Jihons/ycalendar2/blob/main/ycalendar2/LICENSE\r\n*/\r\n\r\nimport * as Util from \"./util\";\r\nimport * as XEvent from \"./event\";\r\nimport * as CheckedDates from \"./checkeddates\";\r\n\r\n\r\n/**\r\n* The class to make the html string as a calendar.\r\n*/\r\nexport class TableCreator{\r\n\r\n    /**\r\n    * The constant value as a number of days a week.\r\n    */\r\n    private MAX_DAY_OF_WEEK = 7;\r\n\r\n    /**\r\n    * The counter to count the cells which you've made.\r\n    */\r\n    private _cellCounter:number;\r\n\r\n    /**\r\n    * The constructor.\r\n    */\r\n    constructor(){\r\n        this._cellCounter = 1;\r\n    }\r\n\r\n    /**\r\n    * Create the title html text for ycalendar.\r\n    * @param prevDate The object of the class DateEx as a previous manth.\r\n    * @param mainDate The object of the class DateEx as a this manth.\r\n    * @param nextDate The object of the class DateEx as a next manth.\r\n    * @returns The html string as a title.\r\n    */\r\n    createTitleHTMLString( prevDate:CheckedDates.DateEx, mainDate:CheckedDates.DateEx, nextDate:CheckedDates.DateEx ): string{\r\n        var titleHtml = \"\";\r\n        titleHtml += '<h2 id=\"yc_title\"><a title=\"' + prevDate.getFullYear() + '/' + prevDate.getMonth() + '\" onclick=\"YCalendar2.ycalendar_prevButton_Click(' + prevDate.getFullYear() + ', ' + prevDate.getMonth() + ')\">◀</a> ';\r\n        titleHtml += mainDate.getFullYear() + '/' + mainDate.getMonth();\r\n        titleHtml += ' <a title=\"' + nextDate.getFullYear() + '/' + nextDate.getMonth() + '\" onclick=\"YCalendar2.ycalendar_nextButton_Click(' + nextDate.getFullYear() + ', ' + nextDate.getMonth() + ')\">▶</a></h2>';\r\n    return titleHtml;\r\n    }\r\n\r\n    /**\r\n    * Create the header for the ycalendar table.\r\n    * @returns The html string as a header for ycalendar.\r\n    */\r\n    createTableHeaderHtmlString(): string{\r\n        var tableHeaderHtml = \"\";\r\n        tableHeaderHtml += '<table id=\"yc_table\">';\r\n        tableHeaderHtml += '<tr><th class=\"yc_table_header\">Sun</th><th class=\"yc_table_header\">Mon</th><th class=\"yc_table_header\">Thue</th>';\r\n        tableHeaderHtml += '<th class=\"yc_table_header\">Wed</th><th class=\"yc_table_header\">Thu</th><th class=\"yc_table_header\">Fri</th><th class=\"yc_table_header\">Sat</th></tr>';\r\n        tableHeaderHtml += '<tr>';\r\n    return tableHeaderHtml;\r\n    }\r\n\r\n    /**\r\n    * Create the empty cells for the table of yalendar.\r\n    * @param max The max number of cells.\r\n    * @returns The html string as an empty cell.\r\n    */\r\n    createEmptyCells( max:number ): string{\r\n        let txt = \"\";\r\n        for( var i = 0; i < max; i++ ){\r\n            txt += '<td class=\"yc_unchecked_day\">&nbsp;</td>';\r\n            if( this._cellCounter % this.MAX_DAY_OF_WEEK == 0 ) txt += \"</tr><tr>\";\r\n            this._cellCounter++;\r\n        }\r\n    return txt;\r\n    }\r\n\r\n    /**\r\n    * Create the cell which has number (as a calendar).\r\n    * @param mainDate The object of the class DateEx.\r\n    * @param lastDayInMonth The number of the date which this manth has.\r\n    * @param checkedDateList The object of the class CheckedDateList, for coloring cells.\r\n    * @returns The html string as a number cell.\r\n    */\r\n    createMainCells( mainDate:CheckedDates.DateEx, lastDayInMonth:number, checkedDateList:CheckedDates.CheckedDateList ): string{\r\n        let txt = \"\";\r\n        for( var i = 0; i < lastDayInMonth; i++ ){\r\n            const classname = Util.createClassName( checkedDateList, new CheckedDates.CheckedDate( mainDate.getFullYear(), mainDate.getMonth(), i + 1, CheckedDates.CheckedDateType.Positive ) );\r\n            txt += '<td class=\"' + classname + '\">';\r\n            txt += '<div ondblclick=\"YCalendar2.ycalender_DoubleClick(' + mainDate.getFullYear() + ',' + mainDate.getMonth() + ',' + (i + 1) + ')\">';\r\n            txt += (i + 1);\r\n            txt += '</div>';\r\n            txt += '</td>';\r\n            if( this._cellCounter % this.MAX_DAY_OF_WEEK == 0 ) txt += \"</tr><tr>\";\r\n            this._cellCounter++;\r\n        }\r\n    return txt;\r\n    }\r\n\r\n    /**\r\n    * Create the footer for the ycalendar table.\r\n    * @returns The html string as a footer for ycalendar.\r\n    */\r\n    createTableFooterHtmlString(): string{\r\n        return \"</table>\";\r\n    }\r\n}\r\n","/**\r\n* @file\r\n* @license\r\n* Copyright (c) 2022 Yor-Jihons\r\n* Released under the MIT license.\r\n* https://github.com/Yor-Jihons/ycalendar2/blob/main/ycalendar2/LICENSE\r\n*/\r\n\r\nimport * as CheckedDates from \"./checkeddates\";\r\n\r\n/**\r\n* To create the class name string for the cells.\r\n* @param checkedDateList The object of the class CheckedDateList, which means the DateEx list you want to check.\r\n* @param targetDate The object of the class CheckedDate you want to check.\r\n* @returns Returns \"yc_unchecked_day\" if the checkedDateList doesn't have targetDate.\r\n* Returns \"yc_positive_checked_day\" if the checkedDateList has targetDate and targetDate is meant positive.\r\n* Returns \"yc_negative_checked_day\" if the checkedDateList has targetDate and targetDate is meant negative.\r\n*/\r\nexport function createClassName( checkedDateList:CheckedDates.CheckedDateList, targetDate:CheckedDates.CheckedDate ): string{\r\n    if( checkedDateList == undefined || checkedDateList == null ) return \"yc_unchecked_day\";\r\n\r\n    let date = checkedDateList.at( targetDate );\r\n\r\n    // If checkDateList doesn't have targetDate, returns as *Unchecked cell*.\r\n    if( date == null ) return \"yc_unchecked_day\";\r\n\r\n    // If date is positive, returns as *Positive checked cell*.\r\n    if( date.getType() == CheckedDates.CheckedDateType.Positive ) return \"yc_positive_checked_day\";\r\n\r\n    // If date is negative, returns as *Negative checked cell*.\r\n    if( date.getType() == CheckedDates.CheckedDateType.Negative ) return \"yc_negative_checked_day\";\r\n\r\nreturn \"yc_unchecked_day\";\r\n}\r\n","/**\r\n* @file\r\n* @license\r\n* Copyright (c) 2022 Yor-Jihons\r\n* Released under the MIT license.\r\n* https://github.com/Yor-Jihons/ycalendar2/blob/main/ycalendar2/LICENSE\r\n*/\r\n\r\nimport * as TableCreation from \"./tablecreation\";\r\nimport * as CheckedDates from \"./checkeddates\";\r\n\r\n\r\n\r\n/**\r\n* The class to show the calendar.\r\n*/\r\nexport class YCalendar2{\r\n    /**\r\n    * The object of a class, which is derived from the class YC_Event, to use some events.\r\n    */\r\n    private _event:any;\r\n\r\n    /**\r\n    * The object of the class CheckedDateList, which manages the DateEx.\r\n    */\r\n    private _checkedDateList:any = null;\r\n\r\n    /**\r\n    * The constructor.\r\n    */\r\n    constructor(){\r\n        this._event = null;\r\n        this.setIdString( \"ycalendar2\" );\r\n    }\r\n\r\n    /**\r\n    * The setter for the id (of the div tag).\r\n    * @param id_name The string ID (of the div tag).\r\n    */\r\n    setIdString( id_name:string ): void{\r\n        calendar_area = document.getElementById( id_name );\r\n    }\r\n\r\n    /**\r\n    * The setter for the event.\r\n    * @param yc_event The object of a class, which is derived from the class YC_Event, to use some events.\r\n    */\r\n    setEvent( yc_event:any ): void{\r\n        this._event = yc_event;\r\n    }\r\n\r\n    /**\r\n     * The setter for CheckedDateList.\r\n     * @param checkedDateList The object of the class CheckedDateList.\r\n     */\r\n    setCheckedDateList( checkedDateList:CheckedDates.CheckedDateList ): void{\r\n        this._checkedDateList = checkedDateList;\r\n    }\r\n\r\n    /**\r\n    * Draw the ycalendar.\r\n    * @param date The object of the class Date.\r\n    */\r\n    draw( date:CheckedDates.DateEx ): void{\r\n        if( calendar_area === null ){\r\n            throw new Error( \"The div area which the ycalendar2 shows, is something wrong! That is null!\" );\r\n        }\r\n        let prevDateMonth:number = (date.getMonth() - 1);\r\n        let prevDateYear:number  = date.getFullYear();\r\n        if( prevDateMonth <= 0 ){\r\n            prevDateMonth = 12;\r\n            prevDateYear--;\r\n        }\r\n        let prevDate:CheckedDates.DateEx = new CheckedDates.DateEx( prevDateYear, prevDateMonth, date.getDate() );\r\n\r\n        let mainDate_first:CheckedDates.DateEx = date;\r\n        let mainDate_last:CheckedDates.DateEx  = date.createLastDateEx();\r\n\r\n        let nextDateMonth:number = (date.getMonth() + 1);\r\n        let nextDateYear:number  = date.getFullYear();\r\n        if( nextDateMonth >= 13 ){\r\n            nextDateMonth = 1;\r\n            nextDateYear++;\r\n        }\r\n        let nextDate = new CheckedDates.DateEx( nextDateYear, nextDateMonth, date.getDate() );\r\n\r\n        const tableCreator:TableCreation.TableCreator = new TableCreation.TableCreator();\r\n\r\n        let htmlText:string = \"\";\r\n        htmlText += tableCreator.createTitleHTMLString( prevDate, mainDate_first, nextDate );\r\n\r\n        htmlText += tableCreator.createTableHeaderHtmlString();\r\n\r\n        const NUM_OF_EMPTY_CELL:number = mainDate_first.getDay();\r\n        htmlText += tableCreator.createEmptyCells( NUM_OF_EMPTY_CELL );\r\n\r\n        const lastDayInMonth:number   = mainDate_last.getDate();\r\n        htmlText += tableCreator.createMainCells( mainDate_first, lastDayInMonth, this._checkedDateList );\r\n\r\n        const MAX_CELL:number = 42;\r\n        let num_of_tail_cell  = MAX_CELL - (NUM_OF_EMPTY_CELL + lastDayInMonth);\r\n        htmlText += tableCreator.createEmptyCells( num_of_tail_cell );\r\n\r\n        htmlText += tableCreator.createTableFooterHtmlString();\r\n\r\n        calendar_area.innerHTML = htmlText;\r\n    }\r\n\r\n    /**\r\n    * The method for the double-click event.\r\n    * @param year The target year.\r\n    * @param month The target month. The value is from 1 to 12.\r\n    * @param day The target date. The value is from 1 to 31.\r\n    */\r\n    onDoubleClicked( year:number, month:number, day:number ){\r\n        if( this._event != null ){\r\n            this._event.onDoubleClicked( year, month, day );\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n* The main object for the class div#ycalendar.(for HTML)\r\n*/\r\nlet calendar_area:any = null;\r\n\r\nexport let ycalendar2 = new YCalendar2();\r\n\r\n/**\r\n* The event for prevButton click.\r\n* @param year The target year.\r\n* @param month The target month. The value is from 1 to 12.\r\n*/\r\nexport function ycalendar_prevButton_Click( year:number, month:number ): void{\r\n    ycalendar2.draw( new CheckedDates.DateEx( year, month, 1 ) );\r\n}\r\n\r\n/**\r\n* The event for nextButton click.\r\n* @param year The target year.\r\n* @param month The target month. The value is from 1 to 12.\r\n*/\r\nexport function ycalendar_nextButton_Click( year:number, month:number ): void{\r\n    ycalendar2.draw( new CheckedDates.DateEx( year, month, 1 ) );\r\n}\r\n\r\n/**\r\n* The event for the cells doubleclick.\r\n* @param year The target year.\r\n* @param month The target month. The value is from 1 to 12.\r\n* @param date The target date. The value is from 1 to 31.\r\n*/\r\nexport function ycalender_DoubleClick( year:number, month:number, date:number ): void{\r\n    ycalendar2.onDoubleClicked( year, month, date );\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\r\n* @file\r\n* @license\r\n* Copyright (c) 2022 Yor-Jihons\r\n* Released under the MIT license.\r\n* https://github.com/Yor-Jihons/ycalendar2/blob/main/ycalendar2/LICENSE\r\n*/\r\n\r\nimport * as XEvent from \"./event\";\r\nimport * as CheckedDates from \"./checkeddates\";\r\nimport * as ycalendars from \"./ycalendar\";\r\n\r\n\r\n// ---------------------------------------------------\r\n// HTMLからも使えるようにする\r\n\r\n\r\n// 1. The inteface definition so that the users can use.\r\ninterface YCalendar2{\r\n    YEvent: any;\r\n    DateEx: any;\r\n    CheckedDate: any;\r\n    CheckedDateType: any;\r\n    CheckedDateList: any;\r\n    createTodayDateEx(): CheckedDates.DateEx;\r\n    createTodayCheckedDate( type:number ): CheckedDates.CheckedDate;\r\n    createDateExFromDate( date:Date ): CheckedDates.DateEx;\r\n    createCheckedDateFromDate( date:Date, type:number ): CheckedDates.CheckedDate;\r\n    drawYcalendar( date:CheckedDates.CheckedDate, id_name:string, checkedDateList:CheckedDates.CheckedDateList, event:XEvent.Event ): void;\r\n    ycalendar_prevButton_Click( year:number, month:number ): void;\r\n    ycalendar_nextButton_Click( year:number, month:number ): void;\r\n    ycalender_DoubleClick( year:number, month:number, day:number ): void;\r\n}\r\n\r\n// 2. Add (1) into the global.window. (window.[...] = ... の左辺)\r\ndeclare global {\r\n    interface Window {\r\n        YCalendar2: YCalendar2;\r\n    }\r\n}\r\n\r\nconst YCalendar2: YCalendar2 = (() =>{\r\n    return {\r\n        /**\r\n        * The enum to indicate whether the positive checked cell or negetive checked cell.\r\n        */\r\n        CheckedDateType: {\r\n            Negative: CheckedDates.CheckedDateType.Negative,\r\n            Unchecked: CheckedDates.CheckedDateType.Unchecked,\r\n            Positive: CheckedDates.CheckedDateType.Positive,\r\n        },\r\n\r\n        /**\r\n        * The event class for double-click the cells.\r\n        */\r\n        YEvent: class extends XEvent.Event{},\r\n\r\n        /**\r\n        * The class to manage the date.\r\n        */\r\n        DateEx: class extends CheckedDates.DateEx{\r\n            /**\r\n            * Constructor\r\n            * @param year The year the user want to manage.\r\n            * @param month The month the user want to manage. The value must be from 1 to 12.\r\n            * @param date The date the user want to manage. The value is from 1 to 31. (def: 1)\r\n            */\r\n            constructor( year:number, month:number, date:number = 1 ){\r\n                super( year, month, date );\r\n            }\r\n        },\r\n\r\n        /**\r\n        * The class to manage the date with the type.\r\n        */\r\n        CheckedDate: class extends CheckedDates.CheckedDate{\r\n            /**\r\n            * Constructor\r\n            * @param year The year the user want to manage.\r\n            * @param month The month the user want to manage. The value must be from 1 to 12.\r\n            * @param date The date the user want to manage. The value is from 1 to 31. (def: 1)\r\n            * @param type The type (negative or positive). ( def: CheckedDateType.Positive )\r\n            */\r\n            constructor( year:number, month:number, date:number = 1, type = CheckedDates.CheckedDateType.Positive ){\r\n                super( year, month, date, type );\r\n            }\r\n        },\r\n\r\n        /**\r\n        * The class to manage the dates (as DateEx).\r\n        */\r\n        CheckedDateList: class extends CheckedDates.CheckedDateList{},\r\n\r\n        /**\r\n        * Create the object of the class DateEx, which means today's date.\r\n        * @returns The object of the class DateEx, which means today's date.\r\n        */\r\n        createTodayDateEx: (): CheckedDates.DateEx => {\r\n            return CheckedDates.createTodayDateEx();\r\n        },\r\n\r\n        /**\r\n        * Create the object of the class CheckedDate, which means today's date.\r\n        * @param type The enum { CheckedDateType.Positive | CheckedDateType.Negative }. ( def: CheckedDateType.Positive )\r\n        * @returns The object of the class CheckedDate, which means today's date.\r\n        */\r\n        createTodayCheckedDate: ( type:number = CheckedDates.CheckedDateType.Positive ): CheckedDates.CheckedDate => {\r\n            return CheckedDates.createTodayCheckedDate( type );\r\n        },\r\n\r\n        /**\r\n        * Create the object of the class DateEx made from the Date.\r\n        * @param date The object of the Date, as a source.\r\n        * @returns The object of the class DateEx made from the Date.\r\n        */\r\n        createDateExFromDate: ( date:Date ): CheckedDates.DateEx => {\r\n            return CheckedDates.createDateExFromDate( date );\r\n        },\r\n\r\n        /**\r\n        * Create the object of the class DateEx made from the Date.\r\n        * @param date The object of the Date, as a source.\r\n        * @param type The enum { CheckedDateType.Positive | CheckedDateType.Negative }. ( def: CheckedDateType.Positive )\r\n        * @returns The object of the class DateEx made from the Date.\r\n        */\r\n        createCheckedDateFromDate: ( date:Date, type:number = CheckedDates.CheckedDateType.Positive ): CheckedDates.CheckedDate => {\r\n            return CheckedDates.createCheckedDateFromDate( date, type );\r\n        },\r\n\r\n        /**\r\n        * Draw the ycalendar.\r\n        * @param date The object of the class CheckedDate.\r\n        * @param id_name The id-name string of the tag div, where the ycalendar2 shows.\r\n        * @param checkedDateList The object of the class CheckedDateList. You can pass null.\r\n        * @param event The event which is derived from the class YEvent.\r\n        */\r\n        drawYcalendar: ( date:CheckedDates.CheckedDate, id_name:string, checkedDateList:CheckedDates.CheckedDateList, event:XEvent.Event ): void => {\r\n            if( id_name !== null && id_name !== undefined ) ycalendars.ycalendar2.setIdString( id_name );\r\n            if( checkedDateList !== null ) ycalendars.ycalendar2.setCheckedDateList( checkedDateList );\r\n            if( event !== null ) ycalendars.ycalendar2.setEvent( event );\r\n            ycalendars.ycalendar2.draw( date );\r\n        },\r\n\r\n        /**\r\n        * The event when the user clicked prev button.\r\n        * @param year The previous year.\r\n        * @param month The previous month.\r\n        */\r\n        ycalendar_prevButton_Click: ( year:number, month:number ): void => {\r\n            ycalendars.ycalendar_prevButton_Click( year, month );\r\n        },\r\n\r\n        /**\r\n        * The event when the user clicked next button.\r\n        * @param year The next year.\r\n        * @param month The next month.\r\n        */\r\n        ycalendar_nextButton_Click: ( year:number, month:number ): void => {\r\n            ycalendars.ycalendar_nextButton_Click( year, month );\r\n        },\r\n\r\n        /**\r\n        * The event when the user clicked the cells.\r\n        * @param year The year clicked by the user.\r\n        * @param month The month clicked by the user.\r\n        * @param date The day clicked by the user.\r\n        */\r\n        ycalender_DoubleClick: ( year:number, month:number, date:number ): void => {\r\n            ycalendars.ycalender_DoubleClick( year, month, date );\r\n        }\r\n    };\r\n})();\r\n\r\n// 4. Add the intefaces.\r\nwindow.YCalendar2 = YCalendar2;\r\n\r\n\r\n// ---------------------------------------------------\r\n"],"names":[],"sourceRoot":""}